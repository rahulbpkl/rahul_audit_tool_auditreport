<!doctype html>
<html>
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>jQuery Bootstrap Table Expandable Demo</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="css/bootstrap.min.css">
<script src="js/jquery-2.1.4.min.js" type="text/javascript"></script>
<script src="js/bootstrap.min.js"></script>
<link href="css/jquerysctipttop.css" rel="stylesheet" type="text/css">
<!-- INCLUDES -->
<link rel="stylesheet" href="css/bootstrap-table-expandable.css">
<script src="js/bootstrap-table-expandable.js"></script>
</head>
<body>



<div class="container">
  <h2>Rahul AST </h2>
<h4>Following files have secure coding violations </h4>
<!--  <p><strong>Note:</strong> The <strong>data-parent</strong> attribute makes sure that all collapsible elements under the specified parent will be closed when one of the collapsible item is shown.</p>
<p>Demo for <a href="http://www.jankoatwarpspeed.com/post/2009/07/19/Expand-table-rows-with-jQuery-jExpand-plugin.aspx">Expand table rows with jQuery - jExpand plugin</a></p> -->

 <table class="table table-striped">
    <thead>
        <tr>
            <th>Rule Name</th>
            <th>Total Violations</th>
            
        </tr>
    </thead>
    <tbody>
<tr>
<td> DCL00J</td>
<td>0</td>
 </tr>
<tr>
<td> DCL00-J</td>
<td>0</td>
 </tr>
<tr>
<td> DCL01-J</td>
<td>0</td>
 </tr>
<tr>
<td> DCL02-J</td>
<td>0</td>
 </tr>
<tr>
<td> MSC00-J</td>
<td>2</td>
 </tr>
<tr>
<td> MSC01-J</td>
<td>4</td>
 </tr>
<tr>
<td> MSC02-J</td>
<td>2</td>
 </tr>
<tr>
<td> EXP02-J</td>
<td>0</td>
 </tr>
<tr>
<td> SER05-J</td>
<td>0</td>
 </tr>

 </tbody>
    </table> 
  <div class="panel-group" id="accordion">
    <div class="panel panel-default">
  
        <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#Loc1">while.java</a>
        </h4>
      </div>
      <div id="Loc1" class="panel-collapse collapse in">
        <div class="panel-body"> <table class="table table-hover table-expandable table-striped">
    <thead>
 <p>Location :<a href="/home/rahul/workspace/RuleC_Arg/input/while.java">/home/rahul/workspace/RuleC_Arg/input/while.java</a></p>

      <tr>
        <th>Rule</th>
        <th>Standard</th>
        <th>Line number</th>
        <th>Violation</th>
      </tr>
    </thead>
    <tbody>
      
      
   	  <tr>
		<td>MSC01-J</td>
		<td>CERT</td>
		<td>4</td>
		<td>Empty infinite loop</td>
	      </tr>
      
 <tr>
      
        <td colspan="5"><p>An infinite loop with an empty body consumes CPU cycles but does nothing. Optimizing compilers and just-in-time systems (JITs) are permitted to (perhaps unexpectedly) remove such a loop. Consequently, programs must not include infinite loops with empty bodies.</p>
<h4>Noncompliant Code Example</h4>
<p>This noncompliant code example implements an idle task that continuously executes a loop without executing any instructions within the loop. An optimizing compiler or JIT could remove the while loop in this example.</p>
      <pre><code class="language-java">public int nop() {
  while (true) {}
}</code></pre>


<h4>Compliant Solution (Thread.sleep())</h4>
<p>This compliant solution avoids use of a meaningless infinite loop by invoking Thread.sleep() within the while loop. The loop body contains semantically meaningful operations and consequently cannot be optimized away.</p>

 <pre><code class="language-java">public final int DURATION=10000; // In milliseconds
public void nop() throws InterruptedException {
  while (true) {
    // Useful operations
    Thread.sleep(DURATION);
  }
}</code></pre>
	<h4>Compliant Solution (yield())</h4>
<p>This compliant solution invokes Thread.yield(), which causes the thread running this method to consistently defer to other threads:</P>
 <pre><code class="language-java">
 public void nop() {
  while (true) {
    Thread.yield();
  }
}</code></pre>
        <h4>Additional information</h4>
          <ul>
            <li><a href="https://www.securecoding.cert.org/confluence/display/java/MSC01-J.+Do+not+use+an+empty+infinite+loop">MSC01-J. Do not use an empty infinite loop</a></li>
          </ul></td>
      </tr>	  <tr>
		<td>MSC01-J</td>
		<td>CERT</td>
		<td>11</td>
		<td>Empty infinite loop</td>
	      </tr>
      
 <tr>
      
        <td colspan="5"><p>An infinite loop with an empty body consumes CPU cycles but does nothing. Optimizing compilers and just-in-time systems (JITs) are permitted to (perhaps unexpectedly) remove such a loop. Consequently, programs must not include infinite loops with empty bodies.</p>
<h4>Noncompliant Code Example</h4>
<p>This noncompliant code example implements an idle task that continuously executes a loop without executing any instructions within the loop. An optimizing compiler or JIT could remove the while loop in this example.</p>
      <pre><code class="language-java">public int nop() {
  while (true) {}
}</code></pre>


<h4>Compliant Solution (Thread.sleep())</h4>
<p>This compliant solution avoids use of a meaningless infinite loop by invoking Thread.sleep() within the while loop. The loop body contains semantically meaningful operations and consequently cannot be optimized away.</p>

 <pre><code class="language-java">public final int DURATION=10000; // In milliseconds
public void nop() throws InterruptedException {
  while (true) {
    // Useful operations
    Thread.sleep(DURATION);
  }
}</code></pre>
	<h4>Compliant Solution (yield())</h4>
<p>This compliant solution invokes Thread.yield(), which causes the thread running this method to consistently defer to other threads:</P>
 <pre><code class="language-java">
 public void nop() {
  while (true) {
    Thread.yield();
  }
}</code></pre>
        <h4>Additional information</h4>
          <ul>
            <li><a href="https://www.securecoding.cert.org/confluence/display/java/MSC01-J.+Do+not+use+an+empty+infinite+loop">MSC01-J. Do not use an empty infinite loop</a></li>
          </ul></td>
      </tr><!--$newtableblockattachhere-->
    </tbody>
  </table></div>
      </div>
    </div>

    
 
  <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#Loc2">ncc_msc01j.java</a>
        </h4>
      </div>
      <div id="Loc2" class="panel-collapse collapse in">
        <div class="panel-body"> <table class="table table-hover table-expandable table-striped">
    <thead>
 <p>Location :<a href="/home/rahul/workspace/RuleC_Arg/input/ncc_msc01j.java">/home/rahul/workspace/RuleC_Arg/input/ncc_msc01j.java</a></p>

      <tr>
        <th>Rule</th>
        <th>Standard</th>
        <th>Line number</th>
        <th>Violation</th>
      </tr>
    </thead>
    <tbody>
      
      
   	  <tr>
		<td>MSC01-J</td>
		<td>CERT</td>
		<td>4</td>
		<td>Empty infinite loop</td>
	      </tr>
      
 <tr>
      
        <td colspan="5"><p>An infinite loop with an empty body consumes CPU cycles but does nothing. Optimizing compilers and just-in-time systems (JITs) are permitted to (perhaps unexpectedly) remove such a loop. Consequently, programs must not include infinite loops with empty bodies.</p>
<h4>Noncompliant Code Example</h4>
<p>This noncompliant code example implements an idle task that continuously executes a loop without executing any instructions within the loop. An optimizing compiler or JIT could remove the while loop in this example.</p>
      <pre><code class="language-java">public int nop() {
  while (true) {}
}</code></pre>


<h4>Compliant Solution (Thread.sleep())</h4>
<p>This compliant solution avoids use of a meaningless infinite loop by invoking Thread.sleep() within the while loop. The loop body contains semantically meaningful operations and consequently cannot be optimized away.</p>

 <pre><code class="language-java">public final int DURATION=10000; // In milliseconds
public void nop() throws InterruptedException {
  while (true) {
    // Useful operations
    Thread.sleep(DURATION);
  }
}</code></pre>
	<h4>Compliant Solution (yield())</h4>
<p>This compliant solution invokes Thread.yield(), which causes the thread running this method to consistently defer to other threads:</P>
 <pre><code class="language-java">
 public void nop() {
  while (true) {
    Thread.yield();
  }
}</code></pre>
        <h4>Additional information</h4>
          <ul>
            <li><a href="https://www.securecoding.cert.org/confluence/display/java/MSC01-J.+Do+not+use+an+empty+infinite+loop">MSC01-J. Do not use an empty infinite loop</a></li>
          </ul></td>
      </tr><!--$newtableblockattachhere-->
    </tbody>
  </table></div>
      </div>
    </div>

    
 
  <div class="panel panel-default">
      <div class="panel-heading">
        <h4 class="panel-title">
          <a data-toggle="collapse" data-parent="#accordion" href="#Loc6">ncc_msc00j.java</a>
        </h4>
      </div>
      <div id="Loc6" class="panel-collapse collapse in">
        <div class="panel-body"> <table class="table table-hover table-expandable table-striped">
    <thead>
 <p>Location :<a href="/home/rahul/workspace/RuleC_Arg/input/ncc_msc00j.java">/home/rahul/workspace/RuleC_Arg/input/ncc_msc00j.java</a></p>

      <tr>
        <th>Rule</th>
        <th>Standard</th>
        <th>Line number</th>
        <th>Violation</th>
      </tr>
    </thead>
    <tbody>
      
      
   	  <tr>
		<td>MSC00-J</td>
		<td>CERT</td>
		<td>14</td>
		<td>Use SSLSocket rather than Socket</td>
	      </tr>
      
 <tr>
      
        <td colspan="5"><p>
Programs must use the javax.net.ssl.SSLSocket class rather than the java.net.Socket class when transferring sensitive data over insecure communication channels. The class SSLSocket provides security protocols such as Secure Sockets Layer/Transport Layer Security (SSL/TLS) to ensure that the channel is not vulnerable to eavesdropping and malicious tampering.</p></td></tr>	  <tr>
		<td>MSC00-J</td>
		<td>CERT</td>
		<td>41</td>
		<td>Use SSLSocket rather than Socket</td>
	      </tr>
      
 <tr>
      
        <td colspan="5"><p>
Programs must use the javax.net.ssl.SSLSocket class rather than the java.net.Socket class when transferring sensitive data over insecure communication channels. The class SSLSocket provides security protocols such as Secure Sockets Layer/Transport Layer Security (SSL/TLS) to ensure that the channel is not vulnerable to eavesdropping and malicious tampering.</p></td></tr>	  <tr>
		<td>MSC01-J</td>
		<td>CERT</td>
		<td>67</td>
		<td>Empty infinite loop</td>
	      </tr>
      
 <tr>
      
        <td colspan="5"><p>An infinite loop with an empty body consumes CPU cycles but does nothing. Optimizing compilers and just-in-time systems (JITs) are permitted to (perhaps unexpectedly) remove such a loop. Consequently, programs must not include infinite loops with empty bodies.</p>
<h4>Noncompliant Code Example</h4>
<p>This noncompliant code example implements an idle task that continuously executes a loop without executing any instructions within the loop. An optimizing compiler or JIT could remove the while loop in this example.</p>
      <pre><code class="language-java">public int nop() {
  while (true) {}
}</code></pre>


<h4>Compliant Solution (Thread.sleep())</h4>
<p>This compliant solution avoids use of a meaningless infinite loop by invoking Thread.sleep() within the while loop. The loop body contains semantically meaningful operations and consequently cannot be optimized away.</p>

 <pre><code class="language-java">public final int DURATION=10000; // In milliseconds
public void nop() throws InterruptedException {
  while (true) {
    // Useful operations
    Thread.sleep(DURATION);
  }
}</code></pre>
	<h4>Compliant Solution (yield())</h4>
<p>This compliant solution invokes Thread.yield(), which causes the thread running this method to consistently defer to other threads:</P>
 <pre><code class="language-java">
 public void nop() {
  while (true) {
    Thread.yield();
  }
}</code></pre>
        <h4>Additional information</h4>
          <ul>
            <li><a href="https://www.securecoding.cert.org/confluence/display/java/MSC01-J.+Do+not+use+an+empty+infinite+loop">MSC01-J. Do not use an empty infinite loop</a></li>
          </ul></td>
      </tr><!--$newtableblockattachhere-->
    </tbody>
  </table></div>
      </div>
    </div>

    
 
 <!--$newfileblockattachhere-->
    
  </div> 
</div>
    
</body>
</html>

